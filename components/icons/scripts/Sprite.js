import { vars, fs } from './script-utils.js';

const replaceStrings = (input, stringArrays) => {
  let processed = input;
  stringArrays.forEach((array) => {
    processed = processed.replace(array[0], array[1]);
  });
  return processed;
};

const stripExt = (filename) => filename.slice(0, -4);

export default class Sprite {
  constructor() {
    this.source = `${vars.componentSubdir}/`;
    this.dest = vars.componentFileAll;
    this.includedIcons = null;
    this.excludedIcons = vars.excludedIcons;
    this.iconFileList = [];
  }

  setIconFileList() {
    const includedFiles = [];
    try {
      const fileList = fs.readdirSync(this.source);

      fileList.forEach((item) => {
        const iconID = stripExt(item);
        const array = this.excludedIcons;

        if (array.indexOf(iconID) < 0) {
          includedFiles.push(item);
        }
      });

      this.iconFileList = includedFiles;
    } catch (err) {
      console.error(`Unable to scan directory: ${err}`);
    }
    return includedFiles;
  }

  rewriteEachIcon(file) {
    let processedContents = '';

    const stringSets = [
      [new RegExp(/(?:\r\n|\r|\n)/g), ''],
      [
        '<svg version="1.1" xmlns="http://www.w3.org/2000/svg"',
        `\n<symbol id="${file.slice(0, -4)}"`,
      ],
      ['width="24" height="24" ', ''],
      ['<!-- Generated by IcoMoon.io -->', ''],
      ['</svg>', '\n</symbol>'],
    ];

    try {
      const contents = fs.readFileSync(this.source + file, 'utf8');
      processedContents = replaceStrings(contents, stringSets);
    } catch (err) {
      console.error(err);
    }
    return processedContents;
  }

  create() {
    let html = '<svg style="display:none;" xmlns="http://www.w3.org/2000/svg">';

    this.setIconFileList();

    // Get each symbol.
    this.iconFileList.forEach((file) => {
      // Test if file name without .svg is in array.
      if (
        this.includedIcons === null ||
        this.includedIcons.includes(stripExt(file))
      )
        html += this.rewriteEachIcon(file);
    });

    // End sprite.
    html += `</svg>`;

    // Write sprite.
    fs.writeFileSync(this.dest, html);
    console.log(`==> CAGOV: ${this.source} ==> ${this.dest}`);
  }
}
