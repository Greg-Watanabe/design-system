import { vars, fs } from './script-utils.js';

const replaceStrings = (input, stringArrays) => {
  let processed = input;
  stringArrays.forEach((array) => {
    processed = processed.replace(array[0], array[1]);
  });
  return processed;
};

export default class Sprite {
  constructor() {
    this.source = `${vars.componentSubdir}/`;
    this.dest = vars.componentFileAll;
    this.include = null;
  }

  rewriteEachIcon(file) {
    let processedContents = '';

    const stringSets = [
      [new RegExp(/(?:\r\n|\r|\n)/g), ''],
      [
        '<svg version="1.1" xmlns="http://www.w3.org/2000/svg"',
        `\n<symbol id="${file}"`,
      ],
      ['width="24" height="24" ', ''],
      ['<!-- Generated by IcoMoon.io -->', ''],
      ['</svg>', '\n</symbol>'],
    ];

    try {
      const contents = fs.readFileSync(this.source + file, 'utf8');
      processedContents = replaceStrings(contents, stringSets);
    } catch (err) {
      console.error(err);
    }
    return processedContents;
  }

  create() {
    fs.readdir(this.source, (err, files) => {
      // Catch error.
      if (err) {
        console.log(`Unable to scan directory: ${err}`);
      }

      // Start sprite.
      let html =
        '<svg style="display:none;" xmlns="http://www.w3.org/2000/svg">';

      // Get each symbol.
      files.forEach((file) => {
        // Test if file name without .svg is in array.
        if (this.include.includes(file.slice(0, -4)))
          html += this.rewriteEachIcon(file);
      });

      // End sprite.
      html += `</svg>`;

      // Write sprite.
      fs.writeFileSync(this.dest, html);
      console.log(`==> CAGOV: ${this.source} ==> ${this.dest}`);
    });
  }
}
